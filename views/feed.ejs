<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <!-- 알림창 CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.css"
    />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>피드 페이지</title>
    <link rel="stylesheet" href="/static/css/reset.css" />
    <link rel="stylesheet" href="/static/css/navbar.css" />
    <link rel="stylesheet" href="/static/css/feed.css" />
    <link rel="icon" href="/static/img/faviconPomo.png">
    <!-- 글씨체 -->
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <header>
    <!-- 피드 올리는 아이콘 -->
    <div class="plus-icon">
      <img
        src="../static/svg/plus-circle-fill.svg"
        alt="피드 올리는 아이콘"
        onclick="openModal()"
      />
    </div>

    <!-- 피드 올리는 아이콘 누르면 실행되는 모달창 -->
    <div id="modal" class="modal">
      <div class="modal-content">
        <img
          src="../static/svg/x-circle.svg"
          alt="닫기 버튼"
          class="close"
          onclick="closeModal()"
        />
        
        <div
          class="upload-container"
          id="uploadContainer"
          ondragover="event.preventDefault()"
          ondrop="handleDrop(event)"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            fill="currentColor"
            class="bi bi-upload"
            viewBox="0 0 16 16"
          >
            <path
              d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5"
            />
            <path
              d="M7.646 1.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 2.707V11.5a.5.5 0 0 1-1 0V2.707L5.354 4.854a.5.5 0 1 1-.708-.708z"
            />
          </svg>
          <br /><br />
          <label for="imageUpload" class="custom-file-upload" id="uploadlabel">
            파일을 선택하거나 여기로 끌어다 놓으세요<br /><br />
            업로드 가능한 확장자<br />
            .png / .jpg / .jpeg / .bmp /
          </label>
          <br />

          <input type="file" name="file" id="imageUpload" />
          <span class="file-name" id="fileNameDisplay"></span>
        </div>
        <br />
        <textarea
          id="postContent"
          name="feed-content"
          placeholder="게시물 내용을 입력하세요."
          rows="4"
        ></textarea>
        <br />
        <button class="create-button" onclick="createPost()">생성</button>
      </div>
    </div>

    <script>
      const uploadlabel = document.querySelector("#uploadlabel");
      const imageupload = document.querySelector("#imageUpload");

      imageupload.addEventListener("change", (event) => {
        if(imageupload.files.length > 0){
          uploadlabel.textContent = imageupload.files[0].name;
          uploadlabel.style.color = "#121212";
        }else {
          uploadlabel.innerHTML = `파일을 선택하거나 여기로 끌어다 놓으세요<br /><br />
            업로드 가능한 확장자<br />
            .png / .jpg / .jpeg / .bmp /`;
        }
      });
      function toggleCommentBox() {
        const commentBox = document.getElementById("commentBox");
        commentBox.classList.toggle("active");
        if (commentBox.classList.contains("active")) {
          document.getElementById("commentInput").focus();
        }
      }

      // 댓글 전송 함수
      function submitComment() {
        const commentInput = document.getElementById("commentInput");
        const commentText = commentInput.value;
        const userId = req.session.id;
        const feedId = document.getElementById(".feed-item").dataset.feedId;
        if (commentText) {
          // 여기에서 댓글을 서버에 저장할 수 있어요오오오오.
          fetch("/feed/comment", {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              user_id: userId,
              feed_id: feedId,
              comment: commentText,
            })
          }).then(response => response.json())
          .then(data => {
            if(data.message) {
              commentInput.value = ""; // 댓글 입력 란 비우기
              toggleCommentBox(); // 댓글 입력창 숨기기
            } else {
              console.error("댓글 등록 실패");
            }
          })
          .catch(error => {
            console.log("서버 요청 실패:", error);
          });
        } else {
          alert("댓글을 입력해 주세요!")
        }
      }

      function openModal() {
        document.getElementById("modal").style.display = "flex";
      }

      function closeModal() {
        document.getElementById("modal").style.display = "none";
        window.location.href = "/";
      }
      window.onload = function () {
        openModal();
      };

      function createPost() {
        // 업로드된 파일 이름 값 가져오기
        const imageInput = document.getElementById("imageUpload");
        const file = imageInput.files[0]; // 파일객체

        // 사용자가 게시글에 작성한 내용 가져오기
        const content = document.getElementById("postContent").value;

        // 데이터가 빈값인지 확인
        if (!file || !content) {
          Swal.fire({
            icon: "error",
            title: "입력 필수 항목을 확인하세요",
            text: "이미지 또는 게시글 값을 입력해주세요!",
            customClass: {
              popup: 'custom-popup' 
            }
          });
          return;
        }
        // formData 생성 및 값 추가
        const formData = new FormData();
        formData.append("content", content); // 게시글 내용 추가
        formData.append("file", file); // 파일추가

        // 서버로 FormData 전송

        fetch('/feed/upload', {
          method: 'POST',
          body: formData
      })
      .then(response => {
          if (response.ok) {
              Swal.fire({
                  icon: 'success',
                  text: '업로드가 성공적으로 완료되었습니다.',
                  confirmButtonText: '확인'
              }).then ((result) => {
                // 사용자가 확인 버튼 클릭하면 페이지 리다이렉트
                if(result.isConfirmed) {
                // 모달창 닫기 및 
                  document.getElementById("modal").style.display = "none";
                // 페이지 리다이렉트
                  window.location.href = "/";
                }
              });
          } else {
              // 400 에러 확장자 처리
              if (response.status === 400) {
                  return response.json().then(data => {
                      throw new Error(data.message || '허용되지 않는 확장자입니다.');
                  });
              } else {
                  // 기타 에러
                  throw new Error('업로드 실패!');
              }
          }
      })
      .catch((error) => {
          // 모든 에러 상황을 여기서 처리
          Swal.fire({
              icon: 'error',
              text: error.message // 기타 에러 메시지 표시
          });
      });
    }
    </script>
  </body>
</html>
